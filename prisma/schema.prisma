// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Video {
  id        String   @id @default(cuid())
  userId    String   // Clerk user ID
  youtubeUrl String
  s3Key     String   // youtube-videos/{uuid}/yt
  prompt    String?
  
  // Response fields
  totalClips       Int?
  videoDuration    String?
  detectedLanguage String?
  s3Path           String?
  
  clips          Clip[]
  exportedClips  ExportedClip[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([s3Key])
}

model Clip {
  id             String   @id @default(cuid())
  videoId        String
  video          Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  start          String
  end            String
  title          String
  summary        String   @db.Text
  viralityScore  String
  relatedTopics  String[] // Array of topics
  transcript     String   @db.Text
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([videoId])
  @@index([viralityScore])
}

model ExportedClip {
  id             String   @id @default(cuid())
  videoId        String
  video          Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  start          String   // Original clip start time
  end            String   // Original clip end time
  s3Key          String   // S3 path to the exported video clip
  aspectRatio    String   // 1:1, 16:9, 9:16
  targetLanguage String?  // Target language for translation (null if none)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([videoId])
}

model Transcription {
  id             String   @id @default(cuid())
  userId         String   // Clerk user ID
  youtubeUrl     String
  status         String   @default("processing") // processing, completed, failed
  
  segments       TranscriptionSegment[]
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([userId])
  @@index([status])
}

model TranscriptionSegment {
  id              String        @id @default(cuid())
  transcriptionId String
  transcription   Transcription @relation(fields: [transcriptionId], references: [id], onDelete: Cascade)
  
  start           Float         // Start timestamp in seconds
  end             Float         // End timestamp in seconds
  text            String        @db.Text
  speaker         String        // Original speaker ID from API (e.g., "SPEAKER_00")
  speakerName     String?       // Custom speaker name assigned by user
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([transcriptionId])
  @@index([speaker])
}

